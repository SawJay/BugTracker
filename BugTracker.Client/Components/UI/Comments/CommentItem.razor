@using BugTracker.Client.Helpers
@using BugTracker.Client.Models
@using BugTracker.Client.Services.Interfaces
@inject ITicketDTOService TicketService

@if (Comment is not null)
{
    <!-- Comment -->
    <div class="border-bottom">
        <div class="d-flex align-items-center pb-1 mb-3 pt-2">
            <img class="rounded-circle" src="@Comment.User!.ProfilePictureUrl" width="50" height="50" alt="Comment author">
            <div class="ps-3">
                <h6 class="mb-0">@Comment.User.FullName</h6>
                <span class="fs-sm text-body-secondary">@Comment.Created.ToString("g")</span>
            </div>
        </div>
        <p class="pb-2 mb-0">@Comment.Content</p>
        <div class="mb-2">
            <AuthorizeView Context="EditComment">
                @if (Comment.UserId == userInfo!.UserId || EditComment.User.IsInRole("Admin") || EditComment.User.IsInRole("ProjectManager"))
                {
                    @if (status == Status.Viewing)
                    {
                        <button class="btn btn-danger btn-sm" aria-label="Delete Comment" @onclick="HandleDelete">
                            <i class="bi bi-trash"></i>
                        </button>
                        <a class="btn btn-warning btn-sm" aria-label="Edit Comment" @onclick="() => status = Status.Editing">
                            <i class="bi bi-pencil"></i>
                        </a>
                    }
                    else if (status == Status.Editing)
                    {
                        <EditForm Context="contextEditForm" Model="Comment" class="gap-3 p-3 align-items-center" OnValidSubmit="HandleUpdate">
                            <DataAnnotationsValidator />
                            <div class="gap-2">
                                <InputText class="form-control" @bind-Value="@Comment.Content" />
                                <ValidationMessage For="() => Comment.Content" />
                            </div>
                            <div class="mt-2 mt-md-0">
                                <span class="text-nowrap">
                                    <button type="submit" class="btn btn-primary btn-sm">
                                        <i class="bi bi-check" aria-label="Save Changes"></i>
                                    </button>
                                </span>
                            </div>
                            <ValidationSummary />
                        </EditForm>
                    }
                }
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired]
    public TicketCommentDTO? Comment { get; set; }

    [Parameter, EditorRequired]
    public int TicketId { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TicketCommentDTO> OnUpdate { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private UserInfo? userInfo;
    private IEnumerable<TicketCommentDTO> comments = [];

    private enum Status
    {
        Viewing,
        Editing,
    }

    private Status status = Status.Viewing;

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        comments = await TicketService.GetTicketCommentsAsync(TicketId, userInfo!.CompanyId);
    }


    private async Task HandleDelete()
    {
        await OnDelete.InvokeAsync(Comment!.Id);
    }

    private async Task HandleUpdate()
    {
        await OnUpdate.InvokeAsync(Comment);
        status = Status.Viewing;
    }


}
