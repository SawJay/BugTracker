@using BugTracker.Client.Helpers
@using BugTracker.Client.Models
@using BugTracker.Client.Services.Interfaces

@inject IProjectDTOService ProjectService


@if (Project is not null)
{
    <tr>
        <td>@Project.Id</td>
        <td> <a href="projects/@Project.Id" class="text-decoration-none">@Project.Name</a></td>
        <td class="text-center">@Project.StartDate.ToString("g")</td>
        <td class="text-center">@Project.EndDate.ToString("g")</td>
        <td class="text-center">@Project.Priority</td>
        <td class="text-center">@ProjectManager?.FullName</td>
        @if (Project.IsArchived is false)
        {
            <td class="text-center">
                <button class="btn btn-outline-danger" @onclick="HandleSubmit">
                    Archive
                </button>
            </td>
        }
        else if (Project.IsArchived is true)
        {
            <td class="text-center">
                <button class="btn btn-outline-success" @onclick="HandleSubmit">
                    Restore
                </button>
            </td>
        }
        <td class="text-center">
            <a class="btn btn-outline-warning" href="projects/edit/@Project.Id">
                Edit
            </a>
        </td>
    </tr>
}

@code {
    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnSubmit { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }
    private UserInfo? userInfo;

    private UserDTO? ProjectManager;

    protected override async Task OnParametersSetAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        ProjectManager = await ProjectService.GetProjectManagerAsync(Project!.Id, userInfo!.CompanyId);
    }

    private async Task HandleSubmit()
    {
        await OnSubmit.InvokeAsync(Project!.Id);
    }
}
