@page "/projects/archived"
@using BugTracker.Client.Components.UI.Projects
@using Microsoft.AspNetCore.Authorization
@using BugTracker.Client.Services.Interfaces
@using BugTracker.Client.Models
@using BugTracker.Client.Helpers
@using BugTracker.Client.Components.Pages
@inject IProjectDTOService ProjectService
@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>Archived Projects</PageTitle>
<AuthorizeView Roles="Admin">
    <div class="row">
        <div class="col-lg-3 col-md-4 col-xs-12 justify-content-start align-items-center">
            <h5 class="text-uppercase mb-0 pt-2">
                Archived Projects
            </h5>
        </div>

        <div class="col-lg-9 col-md-8 col-xs-12 justify-content-end align-self-center d-flex">
            <a class="btn btn-outline-info justify-content-end" href="projects/index">Back to Projects</a>
        </div>

    </div>

    <div class="table-responsive mt-4">
        <table class="table table-striped table-bordered">
            <thead class="table">
                <tr>
                    <th>Project</th>
                    <th class="text-center">Start Date</th>
                    <th class="text-center">End Date</th>
                    <th class="text-center">Priority</th>
                    <th class="text-center">Project Manager</th>
                    <th class="text-center">Restore</th>
                    <th class="text-center">Edit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (ProjectDTO project in archivedProjects)
                {
                    <ProjectTableItem Project="project" OnSubmit="HandleRestore" />
                }
            </tbody>
        </table>
    </div>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private UserInfo? userInfo;
    private IEnumerable<ProjectDTO> archivedProjects = [];

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        archivedProjects = await ProjectService.GetArchivedProjects(userInfo!.CompanyId);
    }

    private async Task HandleRestore(int projectId)
    {
        await ProjectService.RestoreProjectAsync(projectId, userInfo!.CompanyId);
        archivedProjects = await ProjectService.GetArchivedProjects(userInfo!.CompanyId);
    }

}
