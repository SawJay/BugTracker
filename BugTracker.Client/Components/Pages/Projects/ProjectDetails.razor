@page "/projects/{id:int}"

@using BugTracker.Client.Components.UI.Tickets
@using BugTracker.Client.Helpers
@using Microsoft.AspNetCore.Authorization
@using BugTracker.Client.Models
@using BugTracker.Client.Services.Interfaces
@using BugTracker.Client.Components

@inject IProjectDTOService ProjectService
@inject ITicketDTOService TicketService
@inject ICompanyDTOService CompanyService
@rendermode InteractiveAuto
@attribute [Authorize]
@inject NavigationManager Nav

@if (Project is not null)
{
    <PageTitle>Edit Project</PageTitle>

    <div class="row pb-3 pt-2">
        <div class="col-lg-3 col-md-4 col-xs-12 justify-content-start align-items-center">
            <h5 class="text-uppercase mb-0">
                Project Details
            </h5>
        </div>
        <AuthorizeView Roles="Admin">
            <div class="col-lg-9 col-md-8 col-xs-12 justify-content-end align-items-center d-flex">
                <a class="btn btn-outline-danger justify-content-end" href="projects/edit/@Project.Id">Edit Project</a>
            </div>
        </AuthorizeView>
    </div>
    <hr />
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-8 pr-2">
                <div class="row">
                    <div class="col-12 card border-0 px-0">
                        <div class="card-body bg-transparent border-0">
                            <h2 class="card-title">
                                @Project.Name
                            </h2>
                            <p class="pt-3">@Project.Description</p>
                        </div>
                    </div>
                </div>
                <AuthorizeView>
                    @if (context.User.IsInRole("Admin") || context.User.IsInRole("ProjectManager"))
                    {
                        <div class="table-responsive col-12">
                            <h4>Tickets</h4>
                            <table class="table table-striped table-bordered">
                                <thead class="table">
                                    <tr>
                                        <th>ID</th>
                                        <th>Title</th>
                                        <th class="text-center">Priority</th>
                                        <th class="text-center">Status</th>
                                        <th class="text-center">Date Added</th>
                                        <th class="text-center">Edit</th>
                                        <th class="text-center">Archive</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (TicketDTO ticket in Project.Tickets.Where(t => t.IsArchived == false))
                                    {
                                        <ProjectDetailTicketItem Ticket="ticket" OnSubmit="HandleArchive" />
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive col-12">
                            <h4>Tickets</h4>
                            <table class="table table-striped table-bordered">
                                <thead class="table">
                                    <tr>
                                        <th>ID</th>
                                        <th>Title</th>
                                        <th class="text-center">Priority</th>
                                        <th class="text-center">Status</th>
                                        <th class="text-center">Date Added</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (TicketDTO ticket in Project.Tickets.Where(t => t.IsArchived == false))
                                    {
                                        <LimitedProjectDetailTicketItem Ticket="ticket" />
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </AuthorizeView>
            </div>
            <div class="col-lg-4 pt-2">
                <div class="card border-0">
                    <div class="card-body">
                        <h4 class="card-title mb-0">Additonal Info</h4>
                    </div>
                    <div class="card-body bg-info-subtle">
                        <div class="row text-center">
                            <div class="col-12 my-2 text-start">
                                Priority: <span class="badge bg-warning">@Project.Priority</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="pt-3">
                            Date Entered:
                        </h5>
                        <span>
                            @Project.Created.ToString("MM/dd/yyyy")
                        </span>
                        <h5 class="pt-3">
                            Start Date
                        </h5>
                        <span>
                            @Project.StartDate.ToString("MM/dd/yyyy")
                        </span>
                        <h5 class="pt-3">
                            End Date
                        </h5>
                        <span>
                            @Project.EndDate.ToString("MM/dd/yyyy")
                        </span>
                        <h5 class="pt-3">
                            Project Manager
                        </h5>
                        <span class="pb-3">
                            @ProjectManager?.FullName
                        </span>
                        <AuthorizeView Roles="Admin">
                            <InputSelect class="form-select pt-2" @bind-Value="selectedProjectManager">
                                <option value="">
                                    Project Manager..
                                </option>
                                @if (ProjectManagers is not null)
                                {
                                    @foreach (UserDTO user in ProjectManagers)
                                    {
                                        <option value="@user.Id">
                                            @user.FullName
                                        </option>
                                    }
                                }
                            </InputSelect>
                            <div class="col-12 ms-auto pt-3">
                                <button @onclick="AssignProjectManager" class="btn btn-primary btn-sm">
                                    Assign
                                </button>
                            </div>
                        </AuthorizeView>
                        <h5 class="pt-3">Project members</h5>
                        <AuthorizeView Context="ProjectDetail">
                            @if (ProjectDetail.User.IsInRole("Admin") || ProjectDetail.User.IsInRole("ProjectManager") && userInfo!.UserId == ProjectManager?.Id)
                            {
                                <div class="row cols-md-2">
                                    <div class="col">
                                        <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modalId">Assign Members</button>
                                    </div>
                                    <div class="col">
                                        <button href="#" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#modalId2">Remove Members</button>
                                    </div>
                                </div>
                            }
                        </AuthorizeView>
                        <div class="row mt-1">
                            @foreach (UserDTO member in Members)
                            {
                                <div class="col-3 my-2 pt-3">
                                    <img class="rounded-circle" src="@member.ProfilePictureUrl" height="50" width="50" />
                                </div>
                                <div class="col-9 my-2 pt-3 align-items-center d-flex">
                                    <span>@member.FullName -  @member.Role</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Assign Member Modal -->
<div class="modal fade" id="modalId" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Member</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <InputSelect class="form-select pt-2" @bind-Value="selectedMember">
                    <option value="">
                        Add member..
                    </option>
                    @if (companyMembers is not null)
                    {
                        @foreach (UserDTO user in companyMembers!)
                        {
                            bool shouldNotDisplay = Members.Any(m => m.Id == user.Id);

                            if (shouldNotDisplay == false)
                            {
                                if (user.Role == Roles.Developer.ToString() || user.Role == Roles.Submitter.ToString())
                                {
                                    <option value="@user.Id">
                                        @user.FullName - @user.Role
                                    </option>
                                }
                            }
                        }
                    }
                </InputSelect>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                <button type="button" @onclick="AssignMember" data-bs-dismiss="modal" class="btn btn-primary btn-sm">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Remove Member Modal -->
<div class="modal fade" id="modalId2" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Remove Member</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <InputSelect class="form-select pt-2" @bind-Value="selectedMember">
                    <option value="">
                        Remove member..
                    </option>
                    @if (companyMembers is not null)
                    {
                        @foreach (UserDTO user in Members!)
                        {
                            if (user.Role == Roles.Developer.ToString() || user.Role == Roles.Submitter.ToString())
                            {
                                <option value="@user.Id">
                                    @user.FullName - @user.Role
                                </option>
                            }
                        }
                    }
                </InputSelect>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                <button type="button" @onclick="RemoveMember" data-bs-dismiss="modal" class="btn btn-primary btn-sm">Save changes</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private UserInfo? userInfo;

    private IEnumerable<UserDTO> Members = [];
    private ProjectDTO? Project;
    private IEnumerable<ProjectDTO> projects = [];
    private IEnumerable<UserDTO>? ProjectManagers;
    private string? selectedProjectManager;
    private UserDTO? ProjectManager;
    private IEnumerable<UserDTO>? companyMembers;
    private string? selectedMember;

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        Project = (await ProjectService.GetProjectByIdAsync(Id, userInfo!.CompanyId))!;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (userInfo is not null)
        {
            Members = await ProjectService.GetProjectMembersAsync(Id, userInfo.CompanyId);
            companyMembers = await CompanyService.GetCompanyMembersAsync(userInfo.CompanyId);
            ProjectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);
            ProjectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo.CompanyId);
        }
    }

    private async Task HandleArchive(int ticketId)
    {
        await TicketService.ArchiveTicketAsync(ticketId, userInfo!.CompanyId);
        Project = (await ProjectService.GetProjectByIdAsync(Id, userInfo!.CompanyId))!;
    }

    private async Task AssignProjectManager()
    {
        await ProjectService.AssignProjectManagerAsync(Project!.Id, selectedProjectManager!, userInfo!.UserId);
    }

    private async Task AssignMember()
    {
        await ProjectService.AddMemberToProjectAsync(Project!.Id, selectedMember!, userInfo!.UserId);
        Members = await ProjectService.GetProjectMembersAsync(Project.Id, userInfo!.CompanyId);
    }

    private async Task RemoveMember()
    {
        await ProjectService.RemoveMemberFromProjectAsync(Project!.Id, selectedMember!, userInfo!.UserId);
        Members = await ProjectService.GetProjectMembersAsync(Project.Id, userInfo!.CompanyId);
    }


}