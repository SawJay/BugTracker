@page "/projects/myarchivedprojects"
@using BugTracker.Client.Components.UI.Projects
@using Microsoft.AspNetCore.Authorization
@using BugTracker.Client.Services.Interfaces
@using BugTracker.Client.Models
@using BugTracker.Client.Helpers
@using BugTracker.Client.Components.Pages
@inject IProjectDTOService ProjectService
@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>My Archived Projects</PageTitle>

<AuthorizeView Context="ProjectarchivedPM">
    <Authorized>
        @if (ProjectarchivedPM.User.IsInRole("ProjectManager"))
        {
            <div class="row">
                <div class="col-lg-3 col-md-4 col-xs-12 justify-content-start align-items-center">
                    <h5 class="text-uppercase mb-0 pt-2">
                        My Archived Projects
                    </h5>
                </div>
                <div class="col-lg-9 col-md-8 col-xs-12 justify-content-end align-self-center d-flex">
                    <a class="btn btn-outline-info justify-content-end" href="projects/myprojects">Back to Projects</a>
                </div>
            </div>

            <div class="table-responsive mt-4">
                <table class="table table-striped table-bordered">
                    <thead class="table">
                        <tr>
                            <th>Project</th>
                            <th class="text-center">Start Date</th>
                            <th class="text-center">End Date</th>
                            <th class="text-center">Priority</th>
                            <th class="text-center">Project Manager</th>
                            <th class="text-center">Restore</th>
                            <th class="text-center">Edit</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (ProjectDTO project in archivedProjects.Where(p => p.IsArchived == true))
                        {
                            <ProjectTableItem Project="project" OnSubmit="HandleRestore" />
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <h1 class="justify-content-center">You are not authorized to view this page.</h1>
            <a class="justify-content-center btn btn-danger" href="companies/index">Back to home</a>
        }

    </Authorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private UserInfo? userInfo;
    private IEnumerable<ProjectDTO> archivedProjects = [];

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        archivedProjects = await ProjectService.GetMemberArchivedProjectsAsync(userInfo!.UserId, userInfo!.CompanyId);
    }

    private async Task HandleRestore(int projectId)
    {
        await ProjectService.RestoreProjectAsync(projectId, userInfo!.CompanyId);
        archivedProjects = await ProjectService.GetMemberArchivedProjectsAsync(userInfo.UserId, userInfo!.CompanyId);
    }

}
