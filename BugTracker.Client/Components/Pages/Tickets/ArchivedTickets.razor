@page "/tickets/archived"
@using BugTracker.Client.Components.UI.Projects
@using BugTracker.Client.Components.UI.Tickets
@using Microsoft.AspNetCore.Authorization
@using BugTracker.Client.Services.Interfaces
@using BugTracker.Client.Models
@using BugTracker.Client.Helpers
@using BugTracker.Client.Components.Pages
@inject ITicketDTOService TicketService
@rendermode InteractiveAuto
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Archived Tickets</PageTitle>

<div class="row">
    <div class="col-lg-3 col-md-4 col-xs-12 justify-content-start align-items-center">
        <h5 class="text-uppercase mb-0 pt-2">
            Archived Tickets
        </h5>
    </div>
        <div class="col-lg-9 col-md-8 col-xs-12 justify-content-end align-self-center d-flex">
        <a class="btn btn-outline-info justify-content-end" href="tickets/index">All Tickets</a>
        </div>
</div>

<div class="table-responsive mt-4">
    <table class="table table-striped table-bordered">
        <thead class="table">
            <tr>
                <th>Title</th>
                <th class="text-center">Project</th>
                <th class="text-center">Priority</th>
                <th class="text-center">Start Date</th>
                <th class="text-center">Edit</th>
                <th class="text-end">Restore</th>
            </tr>
        </thead>
        <tbody>
            @foreach (TicketDTO ticket in archivedTickets)
            {
                <TicketTableItem Ticket="ticket" OnSubmit="HandleRestore" />
            }
        </tbody>
    </table>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private UserInfo? userInfo;
    private IEnumerable<TicketDTO> archivedTickets = [];

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        archivedTickets = await TicketService.GetArchivedTickets(userInfo!.CompanyId);
    }

    private async Task HandleRestore(int ticketId)
    {
        await TicketService.RestoreTicketAsync(ticketId, userInfo!.CompanyId);
        archivedTickets = await TicketService.GetArchivedTickets(userInfo!.CompanyId);
    }


}
